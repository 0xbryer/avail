// This file is part of Substrate.

// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `frame_system`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-02-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-172-31-12-189`, CPU: `Intel(R) Xeon(R) Platinum 8175M CPU @ 2.50GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/avail-node
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=frame_system
// --extra
// --extrinsic=*
// --heap-pages=4096
// --header=./HEADER-APACHE2
// --log=warn
// --output
// ./output/frame_system.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `frame_system`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> frame_system::WeightInfo for WeightInfo<T> {
        /// The range of component `b` is `[0, 4456448]`.
        fn remark(b: u32, ) -> Weight {
                // Proof Size summary in bytes:
                //  Measured:  `0`
                //  Estimated: `0`
                // Minimum execution time: 5_799_000 picoseconds.
                Weight::from_parts(5_957_000, 0)
                        .saturating_add(Weight::from_parts(0, 0))
                        // Standard Error: 0
                        .saturating_add(Weight::from_parts(598, 0).saturating_mul(b.into()))
        }
        /// The range of component `b` is `[0, 4456448]`.
        fn remark_with_event(b: u32, ) -> Weight {
                // Proof Size summary in bytes:
                //  Measured:  `0`
                //  Estimated: `0`
                // Minimum execution time: 13_771_000 picoseconds.
                Weight::from_parts(13_947_000, 0)
                        .saturating_add(Weight::from_parts(0, 0))
                        // Standard Error: 7
                        .saturating_add(Weight::from_parts(1_877, 0).saturating_mul(b.into()))
        }
        /// Storage: `System::Digest` (r:1 w:1)
        /// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
        /// Storage: UNKNOWN KEY `0x3a686561707061676573` (r:0 w:1)
        /// Proof: UNKNOWN KEY `0x3a686561707061676573` (r:0 w:1)
        fn set_heap_pages() -> Weight {
                // Proof Size summary in bytes:
                //  Measured:  `0`
                //  Estimated: `1485`
                // Minimum execution time: 9_396_000 picoseconds.
                Weight::from_parts(10_133_000, 0)
                        .saturating_add(Weight::from_parts(0, 1485))
                        .saturating_add(T::DbWeight::get().reads(1))
                        .saturating_add(T::DbWeight::get().writes(2))
        }
        /// Storage: `System::Digest` (r:1 w:1)
        /// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
        /// Storage: UNKNOWN KEY `0x3a636f6465` (r:0 w:1)
        /// Proof: UNKNOWN KEY `0x3a636f6465` (r:0 w:1)
        fn set_code() -> Weight {
                // Proof Size summary in bytes:
                //  Measured:  `0`
                //  Estimated: `1485`
                // Minimum execution time: 1_232_530_700_000 picoseconds.
                Weight::from_parts(1_309_348_948_000, 0)
                        .saturating_add(Weight::from_parts(0, 1485))
                        .saturating_add(T::DbWeight::get().reads(1))
                        .saturating_add(T::DbWeight::get().writes(2))
        }
        /// Storage: `Skipped::Metadata` (r:0 w:0)
        /// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
        /// The range of component `i` is `[0, 1000]`.
        fn set_storage(i: u32, ) -> Weight {
                // Proof Size summary in bytes:
                //  Measured:  `0`
                //  Estimated: `0`
                // Minimum execution time: 5_699_000 picoseconds.
                Weight::from_parts(5_887_000, 0)
                        .saturating_add(Weight::from_parts(0, 0))
                        // Standard Error: 1_916
                        .saturating_add(Weight::from_parts(2_124_617, 0).saturating_mul(i.into()))
                        .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(i.into())))
        }
        /// Storage: `Skipped::Metadata` (r:0 w:0)
        /// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
        /// The range of component `i` is `[0, 1000]`.
        fn kill_storage(i: u32, ) -> Weight {
                // Proof Size summary in bytes:
                //  Measured:  `0`
                //  Estimated: `0`
                // Minimum execution time: 5_733_000 picoseconds.
                Weight::from_parts(5_911_000, 0)
                        .saturating_add(Weight::from_parts(0, 0))
                        // Standard Error: 2_201
                        .saturating_add(Weight::from_parts(1_511_115, 0).saturating_mul(i.into()))
                        .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(i.into())))
        }
        /// Storage: `Skipped::Metadata` (r:0 w:0)
        /// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
        /// The range of component `p` is `[0, 1000]`.
        fn kill_prefix(p: u32, ) -> Weight {
                // Proof Size summary in bytes:
                //  Measured:  `84 + p * (69 ±0)`
                //  Estimated: `77 + p * (70 ±0)`
                // Minimum execution time: 10_861_000 picoseconds.
                Weight::from_parts(11_056_000, 0)
                        .saturating_add(Weight::from_parts(0, 77))
                        // Standard Error: 7_821
                        .saturating_add(Weight::from_parts(2_944_164, 0).saturating_mul(p.into()))
                        .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
                        .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
                        .saturating_add(Weight::from_parts(0, 70).saturating_mul(p.into()))
        }
        fn header_extension_builder() -> Weight {
                // Proof Size summary in bytes:
                //  Measured:  `0`
                //  Estimated: `0`
                // Minimum execution time: 458_950_000 picoseconds.
                Weight::from_parts(478_796_000, 0)
                        .saturating_add(Weight::from_parts(0, 0))
        }
}
