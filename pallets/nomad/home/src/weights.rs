
//! Autogenerated weights for nomad_home
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-23, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `legion`, CPU: `Intel(R) Core(TM) i7-8750H CPU @ 2.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/data-avail
// benchmark
// pallet
// --pallet
// nomad-home
// --execution=wasm
// --wasm-execution=compiled
// --extrinsic
// *
// --chain
// dev
// --steps
// 50
// --repeat
// 20
// --output
// ./pallets/nomad/home/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for nomad_home.
pub trait WeightInfo {
	fn improper_update() -> Weight;
	fn dispatch(b: u32, ) -> Weight;
	fn update() -> Weight;
	fn set_updater() -> Weight;
}

/// Weights for nomad_home using the Data Avaiability node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: NomadHome Base (r:1 w:1)
	// Storage: NomadHome RootToIndex (r:1 w:0)
	fn improper_update() -> Weight {
		// Minimum execution time: 495_656 nanoseconds.
		Weight::from_ref_time(513_119_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: NomadHome Base (r:1 w:0)
	// Storage: NomadHome Nonces (r:1 w:1)
	// Storage: NomadHome Tree (r:1 w:1)
	// Storage: NomadHome IndexToRoot (r:0 w:1)
	// Storage: NomadHome RootToIndex (r:0 w:1)
	/// The range of component `b` is `[1, 2048]`.
	fn dispatch(b: u32, ) -> Weight {
		// Minimum execution time: 114_230 nanoseconds.
		Weight::from_ref_time(117_260_068 as u64)
			// Standard Error: 1_140
			.saturating_add(Weight::from_ref_time(9_021 as u64).saturating_mul(b as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: NomadHome Base (r:1 w:1)
	// Storage: NomadHome RootToIndex (r:32 w:32)
	// Storage: NomadHome IndexToRoot (r:31 w:32)
	fn update() -> Weight {
		// Minimum execution time: 845_072 nanoseconds.
		Weight::from_ref_time(881_385_000 as u64)
			.saturating_add(T::DbWeight::get().reads(64 as u64))
			.saturating_add(T::DbWeight::get().writes(65 as u64))
	}
	// Storage: NomadHome Base (r:1 w:1)
	// Storage: UpdaterManager Updater (r:1 w:1)
	fn set_updater() -> Weight {
		// Minimum execution time: 45_128 nanoseconds.
		Weight::from_ref_time(46_213_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: NomadHome Base (r:1 w:1)
	// Storage: NomadHome RootToIndex (r:1 w:0)
	fn improper_update() -> Weight {
		// Minimum execution time: 495_656 nanoseconds.
		Weight::from_ref_time(513_119_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: NomadHome Base (r:1 w:0)
	// Storage: NomadHome Nonces (r:1 w:1)
	// Storage: NomadHome Tree (r:1 w:1)
	// Storage: NomadHome IndexToRoot (r:0 w:1)
	// Storage: NomadHome RootToIndex (r:0 w:1)
	/// The range of component `b` is `[1, 2048]`.
	fn dispatch(b: u32, ) -> Weight {
		// Minimum execution time: 114_230 nanoseconds.
		Weight::from_ref_time(117_260_068 as u64)
			// Standard Error: 1_140
			.saturating_add(Weight::from_ref_time(9_021 as u64).saturating_mul(b as u64))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: NomadHome Base (r:1 w:1)
	// Storage: NomadHome RootToIndex (r:32 w:32)
	// Storage: NomadHome IndexToRoot (r:31 w:32)
	fn update() -> Weight {
		// Minimum execution time: 845_072 nanoseconds.
		Weight::from_ref_time(881_385_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(64 as u64))
			.saturating_add(RocksDbWeight::get().writes(65 as u64))
	}
	// Storage: NomadHome Base (r:1 w:1)
	// Storage: UpdaterManager Updater (r:1 w:1)
	fn set_updater() -> Weight {
		// Minimum execution time: 45_128 nanoseconds.
		Weight::from_ref_time(46_213_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
}
