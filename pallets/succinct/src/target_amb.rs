use crate::TypeInfo;
use codec::Decode;
use codec::Encode;
use codec::MaxEncodedLen;
use patricia_merkle_trie::keccak256;
use patricia_merkle_trie::{EIP1186Layout, StorageProof};
use primitive_types::{H160, H256};
use rlp::Rlp;
use scale_info::prelude::vec::Vec;

use sp_io::hashing::keccak_256 as keccak256;
use trie_db::{Trie, TrieDBBuilder};

#[derive(Clone, Copy, Default, Encode, Decode, Debug, PartialEq, Eq, TypeInfo, MaxEncodedLen)]
pub enum MessageStatusEnum {
	#[default]
	NotExecuted,
	ExecutionFailed,
	ExecutionSucceeded,
}

#[derive(Debug)]
pub enum StorageError {
	StorageValueError,
	AccountNotFound,
	CannotDecodeItems,
}

pub fn get_storage_value(
	slot_hash: H256,
	storage_root: H256,
	proof: Vec<Vec<u8>>,
) -> Result<H256, StorageError> {
	let key = keccak256(slot_hash.as_bytes());
	let db = StorageProof::new(proof).into_memory_db::<keccak256::KeccakHasher>();
	let trie =
		TrieDBBuilder::<EIP1186Layout<keccak256::KeccakHasher>>::new(&db, &storage_root).build();

	if let Some(storage_root) = trie
		.get(&key)
		.map_err(|_| StorageError::StorageValueError)?
	{
		let r = Rlp::new(storage_root.as_slice())
			.data()
			.map_err(|_| StorageError::CannotDecodeItems)?;
		if r.is_empty() {
			return Err(StorageError::CannotDecodeItems);
		}

		Ok(H256::from_slice(r))
	} else {
		Err(StorageError::StorageValueError)
	}
}

pub fn get_storage_root(
	proof: Vec<Vec<u8>>,
	address: H160,
	state_root: H256,
) -> Result<H256, StorageError> {
	let key = keccak256(address.as_bytes());
	let db = StorageProof::new(proof).into_memory_db::<keccak256::KeccakHasher>();
	let trie =
		TrieDBBuilder::<EIP1186Layout<keccak256::KeccakHasher>>::new(&db, &state_root).build();

	if let Some(result) = trie
		.get(key.as_slice())
		.map_err(|_| StorageError::StorageValueError)?
	{
		let byte_slice = result.as_slice();
		let r = Rlp::new(byte_slice);

		let item_count = r
			.item_count()
			.map_err(|_| StorageError::StorageValueError)?;

		if item_count != 4 {
			return Err(StorageError::AccountNotFound);
		}

		let item = r
			.at(2)
			.map_err(|_| StorageError::StorageValueError)?
			.data()
			.map_err(|_| StorageError::StorageValueError)?;

		let storage_root = H256::from_slice(item);

		Ok(storage_root)
	} else {
		Err(StorageError::StorageValueError)
	}
}

#[cfg(test)]
mod test {
	use ark_std::vec;
	use ethabi::{encode, Token};
	use frame_support::BoundedVec;
	use frame_system::submitted_data::{Message, MessageType};
	use hex_literal::hex;
	use primitive_types::{H160, H256, U256};
	use sp_core::bytes::to_hex;
	use sp_io::hashing::keccak_256;

	use crate::target_amb::{get_storage_root, get_storage_value};

	#[test]
	fn test_account_proof() {
		let key = H160::from_slice(hex!("43f0222552e8114ad8F224DEA89976d3bf41659D").as_slice());
		let proof = vec![
            hex!("f90211a050da92c339db0b71cd6a8ac7893a6b8689ec5a3a46a0231b3ee2bd1baee75e1da045a3d973eb74a02b762d8b1ba683f39bca3965806276c8ceffe2d2ebc6cce233a0e88ad29ca98fa08f59f2a7f0110d63505d99a173628643290df869c4d1fa312ba00bb4cc9dc0b1de6ae0d80424b1fa992efb400a07a0e84615c91762fe734b2d0ca0a07e495d39bf2b779405790c6c7e7eb1cc3c803a88db36d1ec600fb0e555b5bba09a1c776e89c8be75d0a9ea022c05fd2ff095869d549e74a8fff7f2fb2deaf738a073b874e49e77dfd9312d7b1afd1ac10e02021a1ba2ab7c97ecaeaa0e26a34027a07e3424405c13aa33a2eb9ec6d8640aa1f67fdd8c8e9e4276334515b1cf1df65ca0246b93b2e3cc625a5e75b40165c6cb95ae8ffb9406563d34092d6359c7616aeea04d2fd8fdb1ab7d8f8fc6079400396fec828914230fade3794f13dc5ae7f6bbb8a04811b9efbfa8d495c5be91be78372b4a29140bd1e092e793db50ed9c495a6d54a02e1b3a417e8341dc8e1ade6ca527778192d33c7c827cfa63a366d007f2884e24a0845f4f33a4993d85766a14222cde1d124bd0f15523d239572883258a7bbcccd9a0ed2021cc2206fcfd9f80d592890b1b4eb615fae4f11d4e4a66d54a6767908901a07d46bf6e9dc9599eb7ca036aa976ef9cc63f02e9097252799f5d3a8792c49620a00b58d1d2cc72401c7cb978d34e15f74038ac63355e415d53b894179b8938dbb780").to_vec(),
            hex!("f90211a03e22056b0eefc94898d516b45ea579bd298291aa521c8665f3d5215da5619513a0b5f3f839320c3d63436a8f27a07bc47a5e7ace4f5d80e437ce2084a007e0fd37a0e666b7198d6b6023de9a698f4bc90a9595e57f7f4e70d07d0366c693d53994c5a05b14820b719fbb37f5e9ff55770d6ceb63ef90af46934377c0364ca72335852ea09c4a1a1d5b1e58e9be1c9b4ea4e943c514b4ae8a382be6dd16e53336354e0500a0058c24b25f97ed51ca2c44e016631753eb97197733b23aea23aef112a2323321a03347d79447b18678fbbedd01b48e52747a5301d32223c4be91f5681d2a69d7b2a04182f6e242615804a49f3a54399e285d84a6e7692cca41008d2b638be30fe00fa0c64a1e71e7512d73008d4cce2a2ba0981023c4ff5f821ba97fcf8059f4699bb5a0673bee8a446cac15221e9292a904ed44762ccb19dac57bbef085d76c6c5b9bb0a065d1ccec63163a4e5ea501f3951a384daaa9aaf4c9c976f963e3597b3e8ce4eca0fb4a788676b5a593e7db6c1149e3c89c774ef9915010846bcb53563736ccde70a0d5274ce6a4e744adab98139ed9d6b5846a449721f32d0f49e020061f5abb094ba0bbf7fd5e93a74f6d8ec4df6f2b0c7f6ff2b387a1a2cb2fd1f26545208c099443a0ddac5ec494b529e87a014e9f80869493008eba559e8ed9e9691fcf219bea14d0a06092b5dc5dd24f768b0c0bf74a6deb0e4e9a5fa3c474d06d52a63ace81d272c980").to_vec(),
            hex!("f90211a0d7b01a1c5e66b3cbb35832888bdb5c1312968a2849b942aad3433c6c21990faca067d17e56fc092306254b21e6101503c64326bbba467c714cadee8c9978aa2b57a0344929c8674281f336f38f5116469a7440bc41695916bd3faaf871716973a257a0e829cbcc6b207df95879af17d6df49a1327a63be6a2b2e8a2c1f8a8485a996e6a03a7f6e4ebd66e0377e7881a2de4361a34ac09116b0ccfe7bf2a96ab5100c4a21a0707b3b93b7aeae349737613b49037c406d411017fcf99c0877225338437fa549a0dce10f297e8bd76ff379c9ef548d51f491db677b566ceb5f83a139bd0b60ae4ea0c4f1e68723d248195d4439942c35f373ddd2889cd97a224ff1a3d379229b79aea0d1716748894608fdb98067c7daaad0e703cb42bd8bc57f39785b155f6914c2aca0c39df4d8b0242b1eaf733f3cd6237211c26b595a18d5e831c062a070ea3a4807a0b2e51fcaee45d252a96baf975e0e506dce7c7e3ddc39e30f7bb9de8955f602dba06ef05cdd0a80b246a4d91bc0dde4df927959474d567fdc9b11a586eede643191a07754dd15ffae315ed9f309f2e2722140fc1989c783fdda3f454fe8d5e7bf0e3ba06ca8810923e01ec88b0a14535fe248d6680df5de9becc5962b97a3c755bb2f84a07cdfc9857d06ba074ad5ca1769ac041c7c99e25a41331f625f16c6ce86bb1ba8a09d779a55977e48cd90d6c6b73b9b86301ad54bce224c4e1abcd7667dfa44347b80").to_vec(),
            hex!("f90211a0a9088ce9294db8a3f65adf5a3ceb5d1cd34c7804f8fe9a69eaf66bb860c5df91a0d6ad86f7ef958121aab83506dd9d5742f5980477e4db503c8a0eee7359d69857a00e72d2f638a2b873689a06afd5c080893e05ee6f8922b495d41b43727879cf3ea0e6f398effbe276d71947a920fc816602b255df3fb73bd59acfd3c036ae0f7996a0a84e9d20d33bb5d5db857f3ace6e32b54c93f7d148ddece8777d01aca293a9c4a0e3e7126f8ebb286919b3cfb2189a22f63fa475fc0fa7b36e79526f28993d089ea0af9c84fa15d80d5cd8462cc342072257f8eac2161a113da401536dc4b4de5ceba0df7cf975aa213b6ca4e655a99f4d074b24b5412e3056d1b39188550b49dea0f7a0c76abf47096e3b2660f935061b4e136378126aefecbcb348c895a4c678192536a0cf16074b69b96652074546708053506e6b2d5b7d6f3564f2091ddb690b701409a042330d1d46d74569cb62f900c06bb2659503d73b93be83371390904004897f11a00eefdc7fd5890c2051dd6f6326e036268613b8209b46c5f31dd4ca57e270a0eda05da0e6248c96f367e2b139c2329ca8ea2d4a9ba4c6438e2d33a9ed37f3d63104a0d43d6814ed1f765fd5d204ce91a92996adef6e65c563af59271b59bd933719eea04e6c678da69cd38894f2574d9b30d8871cd7eddd62b718e0941679a85a85b17da0300aa0769fa573f8c40bc841597e33d763ff32bc044f98aa6559e2df09b3174980").to_vec(),
            hex!("f90211a0bc80d8ae6ccac93ee4b2c020cdc98e960c2f840719e4eed518a28462f5c2e042a01481627b435734196f94592d10ca71c7dcb36eab7c2b39df29aa2c10ea944bc7a0627368fcc64ca6ddc311ddf7310625ef5d02a7a660a739047c4dde24d7f375aaa0ab6529dbec1ad45c32851fe70e17ca08332d8316453884c68f74e7a889ba46c0a0d73c5946469b9925e7681f45580a8d957f98a05f80a1a9bd7fe229ab79fbb7eca0406818fe909531d28e0461f93b428f6b530aa411529a53de213016e0d47693c4a0a2c63d00409e11dce2433521617080599719f65e727fb1b966d288fc5515515ba016e46c67a3b4aba26ed57a38bb0ac50d40301bd4e4482e3eec0667f2d70d4f9aa09262644352b4c7e435f2c77566b0f03b09b3109b0ba4fdb3c18f9f5b3ff83a68a006dc0a9848791e8068f25b0fca1a8f2a17c6421415f73355ee585f69e48dd9c0a0c158363b7c36d9abf2c07fac52c43ad8cbb3708af4c8375c64408da4b1c6112ea020290f03df9348a45be69b11f43ef60239aba95f31bc348439b4827c5a94ea1aa0950c0b5eb46cb26804706efb963b3e8cf3bbf0b0ce78fbfe4232f88e1cc4980fa0dfd3aa0540319f45916236f460f76831bfc526e8c0279fe798c3674ad08998eea0d68b134cb5a9433729bb46521b46e9bf737fabe2c1568185dc0d62cb2df23633a072708353bc10a239c80991deefd9a08158902b0d4ddd81857541368358e71ab280").to_vec(),
            hex!("f901518080a06b3861e939ffd924c512e631febac4b7573840910a230356701f5d9876d462f78080a0644b04a89b048be9044f7ddf0ddfcfdf16eb859770c59bea283be83efc0ab852a04783d2f6f95d2df8ecfe9cd176aabf0d5ce6e1a52009c0d7d8016a9c897cd996a05ebf2e95f0ce88623be1b9df655ddff6032bb68530ce80fc060914a26c983ed6a0b2cda30c80dadf34909d937dc977928bef8b702bcf64ac7cbfb14a1c55444898a0de3bef8b9dfce8c4a2d24b6ca802f5116e7e873ea2d0863f1cf72c23672f82c280a04e75b47f705d7811a0d326440a499b2dfeb0959cd151f91b71896111bfe8ae6580a05fccb9d0c6524886af03bb1f68990c9f54c098f57c664a5c51994052fd563aeca0cbab9ef5e83548e993c5cd9b688af2f34c6d9c5c632b59b687fa5a5e87b6bbf2a0fb82bb552d3eec458a68d01642f0e7df3d88d5b3040f69fa79b2e402adf412fa80").to_vec(),
            hex!("f851808080808080808080808080a035d937961d73f8a0eea9ae41b2f4cbb73c1d2c0666ea35f1ae05c43b5896b1098080a0e05c86fffb9aada22f0429326d6eda556e23f655917975b4f859bc258d32f67f80").to_vec(),
            hex!("f8669d399e1ef4313dc3558aee86cc911474c2262f1dbe387aea254422552a5fb846f8440180a0a03e10dfba89f79567f7c9a238ee7fe66ed32e711be4db6e73d7211601dec360a0356c7854fe7a483ece02a531c58b63aa2bdbab40df89c9f919f0d524b54dd494").to_vec(),
		];

		println!(
			"{:?}",
			H256::from_slice(keccak_256(key.as_bytes()).as_slice())
		);

		// execution state root
		let root = H256(hex!(
			"cd187a0c3dddad24f1bb44211849cc55b6d2ff2713be85f727e9ab8c491c621c"
		));

		let expected_storage_root = H256(hex!(
			"a03e10dfba89f79567f7c9a238ee7fe66ed32e711be4db6e73d7211601dec360"
		));

		let storage_root_result = get_storage_root(proof, key, root);

		// assert_ok!(storage_root_result);
		assert_eq!(expected_storage_root, storage_root_result.unwrap());
	}

	#[test]
	fn test_storage_value() {
		let message_bytes = hex!("01000000000000005400000005e2b19845fe2b7bb353f377d12dd51af012fbba2000000064000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064").to_vec();

		// 841
		let abi_encoded = hex!("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004").as_slice();

		let key = keccak_256(abi_encoded);

		println!("key {:?}", H256(key));

		let proof = vec![
			hex!("f8d18080a0fc8644862938b67a6de59daee2ca86a4a43c8c4fe6d7ca5f71ea19a3e85565c080a002116e22ba81d7274dc866a4612e9b4e3f10345d5164d4c6e02fd6b672446f4da0b23f6176235c786974b40b6a64b3428c26e7ecc9530b122dd26ebe148d12c33380a04ee52d46ac712e1be0869a689dd6116bed17180e70d9d327d0e335e4098c0397808080a072b7b4fabd398c9b5c05e5f329038a9a9bda658b15a56a3d6a298755511538b18080a079866ac4ff54c3062d8fbd4fa347961e9a905b4114a2ed9785e22a5c03f4ffb88080").to_vec(),
			hex!("e219a0053d037613f1c22bb588aaa70237b3798774d2b20413c686e2263daef21ec226").to_vec(),
			hex!("f851a0c45dca792d516550b57f7f31e33c67f0e6debfe0bdb3076fe0078c65c5afbf8280808080a022e43fa2c06d3d498253aadec7a7db94183eec2aabbdf2afc67a45107d19932b8080808080808080808080").to_vec(),
			hex!("f8429f3841a49a1089f4b560f91cfbb0133326654dcbb1041861fc5dde96c724a22fa1a0efac9989593dfa1e64bac26dd75fd613470d99766ad2c954af658253a09d1ad8").to_vec(),
		];

		let storage_root = H256(hex!(
			"6801798586ca88b0ef3b4fb3f83162a9f13e5e242b4c8024c490006054e43933"
		));

		let value = get_storage_value(H256(key), storage_root, proof);
		let expected_value = keccak_256(message_bytes.as_slice());

		println!("{:?}", value.unwrap());

		// assert_eq!(H256(expected_value), value.unwrap())
	}

	#[test]
	fn test_storage_root_avail() {
		let proof = vec![
			hex!("f90211a00089429375db917315fb4b8d67055bdf76e13d11292801af4a4a151f5760ff7aa02ebce9bb13a075ff89c5aae6b67f4d457525c53dfcc016ce72ea17e0e15a3718a04201c7d41a78f6906183b252fecbb231305d4e22c7e5b729b95a5a6ac53f4d46a06b61a1f5e208c3babf5fc1c9c4180af47769ec421c2c3125f313b5394014fa8aa0b2f35b0e2a84ce9e685b3e9558a0495552c80baec0bd687092220314850f543ba0244dca6d79c72abe8e3a12d49f2cf1976ee7bef58c5c6eb9ff6708fa138abfcca005631aa85658a9962bfee9a4827df5ca6f5461c4bc533591c897a66421f9abbfa0478ef142f553c91d672d865bed8d5175ebbbfc72be010d23b8d81cdcb41247e0a0365a9b70e7c6d82d3246b130bc27453ba77f0bcb4301d43c719eae676a7e0d17a001768b342f6cbc790d57276817d0853c94a682e295930951059bd1c24352b46ea0e3d9b775f71b4c1b2a0c35b1e492b0f2c6ce66c94cf2c8320276fe5cd5e427c8a03bd4160a5626c0d56a4435cb13b6cd3adb5f93793b71148cafa16e07f554fa41a052ab349de3157030b412abdd7353ee1d6476c09c153ddb1dba487294f11a5c7ca0ab71e81c1fc9e656fa8f0df6ee16efa5f105acce3c43ef172a04534f00e5d25ea05306a9ed38acb653787765466a764d4c8748c29b4e7a9ad4a75c61c0840b4a17a0699307b9c473f45858fec9fecd034fa0b3427c0efdd02d407c03201dcdaca02380").to_vec(),
			hex!("f90211a0f7c14d7714348be36359dd28afd64e2fb72679a7ae09a27027fc95e335bcde1ca0824329840722c728e0f19ae424caad4581ac42015a4ab8e9d3ea550c857da804a040d48c9df564c00b11d304e2a2597a35b17b25429c3850c4e3fe4e9a278bec88a0a497297590785cfaa8491579745c077b1095348912d4e3288d8f00857ed9db5da0b0ea3abfcdab8c6cf03152cc7a57f602f85d86f4bdb3d1ca2242a5e737561bbda06bbe0e0416b59f1c4cba36afdee766ea4689f1c1ac8e2245f45c2631e2478119a0222dec72b36685a0ca89e49ce87262957f7f891e695ea8ec52e25fbc3a328589a00b3cac878feb2bcd5fc3d49fe5f607eabf75f014df74a268d4aaa1d25654d030a000deffa5e2879748ef9a634a3573484b4dd259c0d4c10453a7e1e3504b56322ea05c356b24b3b36089583f650cb954f884b05275b09b7715a2eb3cf6fa9175738ea093abf2b2cb15649c192d0d79f62627ce634843f84ec98eee99267c1354b5135aa059e9c60388154b3b810ffd41f81ed9128c8091a12e0c53062d9e7430fedf5939a06855c9a5622a40b5bce572522e4774986c7061557d2f1b8f7070d8d397888b4ea04d220a5fb22e38d64cdf4b46a42898b9f1ce9f316f1d332eebebd32c0cc59000a09004930139d4ae94070b29245230d5b28b25ac59c11339928a2eb547f0828341a00f37af44fb487a5ed675e12f0566a54e59cc025466e91cf56dcf348ff4049ed980").to_vec(),
			hex!("f90211a0e9fa1abfa1f1d84a27da9448b42e3c0f5c60c54a1e8cb90c9e28b60824157380a05e977e1d37e502ac74fd54a2debf7e9b7b6e64c261e45e9b0610bcc201ddbe93a02f8a351ea5204d62c85fe6b564eab729fd556b1941a4f83f6f4b6e40e4102869a0a4b62da8ab84fcd0cf425fba4fd03ad7f1350217679e105e57ee146f64b07e07a061049f894647148c39ec3d8c4563d22670ee697f2e4a003513595f5074fe0166a0de1551dd310c9206da56ff9288dc518cccf7cdfa259cc3ff0318a6f3f7539988a00e600d8cb072056fbf1f5bf7d18aec2eb2ba57e93b5e6bb3f0d36042ec8fbe9ba0fa02eb32060ca2e3fd46e39a8456f02156b8efb457c74ccab5789bce1d142613a0919bb37876273e3283660eb2c575ddcfa99239ab79cf7edaf64d5591689c7777a052a8ee269c13ef214ba56ff0ef6b3cb11da6b12ddadbf1883831e91c6768bf60a0028fdfd852916e9cfa13eee9bf6c540bdc7f6d9b18eee15e11da66a8cdfc933ba09d581d74aa42d7974e122d3a3ec6febaa74ca9f714ddf5c52a5bfa9ee41471e5a0c5608d4aef23664aaaa38aa2425cf959b62d30cf22a0d14147a3cab3d4178fc3a0beb1d967ae4415f30d7730c1bfd43446e24c5f0210cb3a0f5a9bc67e9f63228ea03117ae91a22815aac4b1c9210ba7a6682697a73cd68d7741d693c1cbd1925063a032cf653822d7a618300ef2113f0ff0be132dda944106f25350b5f37451c740a280").to_vec(),
			hex!("f90211a0f284a2e627542f07910ea0cb276b0b7813f3b9c056aafe496b3e7f93d1b3aa67a0d45d246efac9fb2e0c8052354aa0eebd68a28e9606efbbd4a5c2f9e990dc4d3ea0fd5d8349c16fda7a90a9c778cc74126188887aeacec8761349e1863d4008602fa022796160a8b1259fca46b22aa863131e970b077a449a5be4c486c9384335826da0b28076746e56b0bc37fb7586e2c4f23b624523d8e2f7abdffa73859cd531c12da08af556fb72bb802fde89a5562659959ef83a7846f0ced10ed6e139b44016bae9a0f948d4f88be556c183e053c131cd62aa278bcc83845437bfc03721828a3e2082a038c90f875a89a76b5b42d7c843ee790b759e482570a0bcb4d291496a40815093a031b88038ca3cd315ba56e783d4423c7c306cd9567f5a9eca972ac631c4c58e83a0858cbce5374ea0469281ee65c5a1aa5cfa19e7f7df02635821be244a5d39a38ea00cefc972ac8009f230bd9c8015753e98072b5f71d3a09093309ac6f09002f420a0e5fb8ae4800ad431a827003be4d719efcc29424f3ad2fbe483a42ab724a8610ea01a584c371a17ffc56a7713b2c6bb65bbcbf63c9d6382e0423dd577031c63842da0104f13e37d23eed61ebe6b78ee93ee9c30c3a92dab0ccbc57715051e9744eb58a0b211502efd34235ac7f948856c809f8aaf5e299df97ff24d4fb0d53caa3d1e83a043d845df46ad73ae3a9f2bfa319c19e7f760922f1268d8b96f0a54cb8ae88ab880").to_vec(),
			hex!("f90211a071241195c881f3437ebd19a9eccd009595c10537df66917a8fab0eb664f834dda0122c775309b9cff05db80ba77a60604d0fcb8a836a5e79999943f0d150297e19a0c32190d1506259a9ffa2ec1fbff6b23bd35d4e6bcb063b19a22ec10b914981f4a022a77ca63522f76d016d04e680d4c27c3ceee14bc4548f9e08c2cc10f9e1b789a0c646ec46e8f8d5fb7de785fe967200994afec4c48b2bcb001b5aed20db936326a0e20c61d63a3ac612051c43ed1acce68e185a08154e5f44e8eceebac0f454202da05b17a5f4ba7ed711f694536b96a69549fe097ba32dee1f9c71eb19a0533d46baa04da0bc8c8f03ad8f1efdf0da738f24c9ec4549acc71d43ae6607f22601ac4f38a08ea8a34e48a70ccac672eaa2c3a4538d61d38cb5a143a4596d571904b6e3181ea0148252504cc36b4f6b1ef7183df2ce176963bacfc97ad3949fcb6da7d4095821a03d63131beaa2c1137d599528084b0aeb4bea87ee8da16f424dd93c3b90087a75a059f94b55179b81bb657f5021b161ab30fffc8620706a858de7103a0da99a262ea0bb62efd30271c9e2bfc8a4938ebcf4d90623d1d55ffb97399f6456c597599464a024a60032c223c88b91e1fc98db296e58468ebf38eed7bdab0e114cdd754bdc80a0271ec93cc3efaacce706f26a3aa42d6f7c9d8fd6944329149ad63b43c78aae34a07caa42499d46895c9b948f37479c6572573db5b644a0862168e25e4e3bfdb57e80").to_vec(),
			hex!("f9015180a09089f0d1272f06751d391dfbc7b6d49b39731b8a14b5e5e97d45e34d89df0f3fa0820bbc641b62cf0f6a4c3836017cdef0bf7f43c1ee8cbc76ce7b5dcd80f58b9480a0fbe1f0ac8158473558c7b9964cc295027449f6e960f5f6407d9ca1c9ef15f7bca0a2fb890c487021019f73371bf6798e8db8b612ca3c7b30fc3495441a1f9518c4a02cd1ca2531caa6e63ac5f16e5ea76018826683f10442ab5c2b1f9963f23b011ca0429bcf37f564e67dd5764f96fa79532113668cbb32059affdfdc82cfdfd5d1e18080a09be000de088393ee33eac568ba00e318f0ed370eded1cdf38aa75ad55e63945380a0a9138320438845382842e94a5b4ea6756af0c82a0f6b4f17eaf049d617aba98ea0229898dbbae35aa9ef23f2a46c26d419257c35ba11aff1b02ca2024a057f8acaa0cc4c22a6806f250facbdecc1d8874d430ccc277d68ca91b5fb10b4d9f7c681578080").to_vec(),
			hex!("f891808080a076082e119bb693f858172779676f80da4deb1fd75b39db89ec6c96e36125cf6a8080a02b87e60a23ebea051ea7f029c26c5fad0ba86fb8d6d5d4bb563f48ddbf7fa6aca0d9693138b984cccc06a7461c7f39cc28947c9dd95d94bdea1047ddd420b81360808080808080a0ae23c016152c96bfa600e365cd62d6ce721f0b0d310e3c7c18b8a293b722a4ab8080").to_vec(),
			hex!("f8669d3e80870bed23e92a482b9f577efea539b7865c0383284e1bf8cb8ae0e3b846f8440280a06801798586ca88b0ef3b4fb3f83162a9f13e5e242b4c8024c490006054e43933a0f99c7a628a59cf1d27d3a906618656d06e3cdcbcd5f91503c002ea2f2420bc01").to_vec(),
		];

		let key = H160::from_slice(hex!("426BdE66aBd85741be832B824eA65A3AaD70113E").as_slice());
		println!(
			"{:?}",
			H256::from_slice(keccak_256(key.as_bytes()).as_slice())
		);

		let state_root = hex!("d6b8a2fb20ade94a56d9d87a07ca11e46cc169ed43dc0d2527a0d3ca2309ba9c");
		let value = get_storage_root(proof, key, H256(state_root));
		// let expected_value = keccak_256(message_bytes.as_slice());

		println!("{:?}", value.unwrap());

		// assert_eq!(H256(expected_value), value.unwrap())
	}

	#[test]
	fn test_abi_encoding() {
		let expected_encoded_message = hex!("00000000000000000000000000000000000000000000000000000000000000200200000000000000000000000000000000000000000000000000000000000000a285c87622a3ac392fb25454033f0c54f17675252d052ed581a97f64b731db120000000000000000000000007f5c02de7232b8510000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007c7").to_vec();

		let data = &[
			Token::FixedBytes(H256::zero().as_bytes().to_vec()),
			Token::Uint(U256::from(1000000000000000000u128)),
		];
		let encoded_data = encode(data);

		let m = Message {
			message_type: MessageType::FungibleToken,
			from: H256(hex!(
				"f39Fd6e51aad88F6F4ce6aB8827279cffFb92266000000000000000000000000"
			)),
			to: H256(hex!(
				"0000000000000000000000000000000000000000000000000000000000000001"
			)),
			original_domain: 2,
			destination_domain: 1,
			data: BoundedVec::truncate_from(encoded_data),
			id: 0,
		};
		let enc = m.abi_encode();

		let encoded_message = hex!("00000000000000000000000000000000000000000000000000000000000000200200000000000000000000000000000000000000000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb9226600000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000").to_vec(); //m.abi_encode();

		let hash = H256(keccak_256(encoded_message.as_slice()));
		let enchash = H256(keccak_256(enc.as_slice()));
		println!("{:?}", to_hex(enc.as_slice(), false));
		println!("{:?}", enchash);
		println!("{:?}", hash);
		assert_eq!(expected_encoded_message, encoded_message);
	}
}
